---
import fs from 'fs';
import { getCollection } from 'astro:content'
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';
import { renderTwigTemplate } from '#utils/functions';

import "@fontsource-variable/open-sans";
import "@fontsource-variable/public-sans";
import "@fontsource-variable/roboto-mono";
import "@fontsource/merriweather/300.css";
import "@fontsource/merriweather/400.css";
import "@fontsource/merriweather/700.css";
import "@fontsource/merriweather/900.css";
import "@fontsource/source-sans-pro/200.css";
import "@fontsource/source-sans-pro/300.css";
import "@fontsource/source-sans-pro/400.css";
import "@fontsource/source-sans-pro/600.css";
import "@fontsource/source-sans-pro/700.css";
import "@fontsource/source-sans-pro/900.css";

export const getStaticPaths = (async () => {
  const allDemos = await getCollection('demos')
  return allDemos.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }))
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { entry } = Astro.props

let props = ""
if(fs.existsSync(entry.data.propsPath)){
  props = fs.readFileSync(entry.data.propsPath, 'utf8')
}


const template =  await renderTwigTemplate({
  path: entry.data.componentPath, 
  props: props ? JSON.parse(props) : ''
})
---

<!doctype html>
<html lang="en" class="h-full">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>{entry.id}</title>
	</head>
	<body x-data class="font-source-sans-pro h-full">
		<div class="p-4" data-iframe-height>
      <!-- Example start -->
      <Fragment set:html={template} />
      <!-- Example end -->
    </div>

    <script>
      // @ts-ignore
      document.querySelectorAll("a").forEach(function (link) {
        link.addEventListener("click", function (e) {
          e.preventDefault();
        });
      });
      
      document.querySelectorAll("form").forEach(function (form){
        form.addEventListener("submit", function(e){
          e.preventDefault()
        })
      })
    </script>
	</body>
</html>

