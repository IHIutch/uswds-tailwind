---
import ColorSwatch from "#components/color-swatch.astro";
import BaseLayout from "#layouts/base-layout.astro";
import { getColors } from "#utils/get-colors";

const formattedColors = getColors()
const activeHeading = ''

---

<BaseLayout title="Colors">
  <div class="flex w-full">
    <aside class="w-72 shrink-0 order-1 pr-4 hidden desktop-lg:flex">
      <div class="fixed top-0 py-12 font-public-sans">
        <h4 class="font-bold mb-2">On this page</h4>
        <ul class="border-l border-gray-cool-20">
          {Object.keys(formattedColors).map(color => (
            <li class="border-l-4 -ml-1" class:list={activeHeading === color ? 'border-black' : 'border-transparent'}>
              <a class="block relative py-1.5 px-4 text-blue-60v hover:text-blue-70v hover:underline focus:outline focus:outline-4 focus:outline-offset-0 focus:outline-blue-40v leading-tighter text-sm" href={`#${color}`}>
                <span>{color}</span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </aside>
    <div class="px-4 tablet:px-12 py-12 min-w-0 w-full">
      <div class="flex flex-col mx-auto max-w-5xl">
        <div class="mb-16">
          <h1 class="text-4xl font-bold font-public-sans mb-4">
            Colors
          </h1>
          <p class="text-xl font-light font-public-sans max-w-prose">
            Color is a practical and emotional tool. It conveys personality, sets a tone, attracts attention, and indicates importance.
          </p>
        </div>
        <div class="space-y-16 desktop:space-y-32">
          {Object.keys(formattedColors).map(colorName => (
            <div>
              <h2 id={colorName} class="font-public-sans text-3xl font-bold mb-4">{colorName}</h2>
              <div class="grid grid-cols-6 desktop:grid-cols-1 gap-x-4 gap-y-8 desktop:gap-x-8">
                {Object.values(formattedColors[colorName]).sort((a, b) => a.order - b.order).map(temp => (
                  <div class:list={
                    formattedColors[colorName].length % 3 === 0
                    ? 'col-span-2' 
                    : formattedColors[colorName].length % 2 === 0
                    ? 'col-span-3' 
                    : 'col-span-1'
                  }>
                    <div class="mb-1">
                      <h3 class="font-public-sans font-medium mb-2">{temp.label}</h3>
                    </div>
                    <div class="space-y-3">
                      {temp.colors.length > 10 ? (
                        <div class="grid grid-cols-1 gap-y-3 gap-x-2 desktop:grid-cols-10">
                          {temp.colors.splice(0,4).map((color) => (
                            <ColorSwatch hex={color.hex} level={color.level} />
                          ))}
                        </div>
                      ) : null}
                      <div class="grid grid-cols-1 gap-y-3 gap-x-2 desktop:grid-cols-10">
                        {temp.colors.map((color) => (
                         <ColorSwatch hex={color.hex} level={color.level} />
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>
